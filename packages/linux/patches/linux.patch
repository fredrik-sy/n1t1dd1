diff -Naur --no-dereference a/arch/arm/boot/dts/kirkwood-n1t1.dts b/arch/arm/boot/dts/kirkwood-n1t1.dts
--- a/arch/arm/boot/dts/kirkwood-n1t1.dts	1969-12-31 16:00:00.000000000 -0800
+++ b/arch/arm/boot/dts/kirkwood-n1t1.dts	2019-06-18 21:25:50.008388007 -0700
@@ -0,0 +1,233 @@
+/* Device tree file for the LG N1T1  NAS box.
+ *
+ * Copyright (c) 2016 Aron Koszo <koszoaron@gmail.com>
+ *                         bodhi <mibodhi@gmail.com> 
+ *
+*/
+
+/dts-v1/;
+
+#include "kirkwood.dtsi"
+#include "kirkwood-6281.dtsi"
+
+/ {
+	model = "LG N1T1";
+	compatible = "lg,n1t1", "marvell,kirkwood-88f6281", "marvell,kirkwood";
+
+	memory {
+		device_type = "memory";
+		reg = <0x00000000 0x8000000>;
+	};
+
+	chosen {
+		bootargs = "console=ttyS0,115200n8 earlyprintk root=/dev/sda1 rootdelay=10";
+		stdout-path = &uart0;
+	};
+
+	ocp@f1000000 {
+		pinctrl: pin-controller@10000 {
+			pmx_uart0: pmx-uart0 {
+				marvell,pins = "mpp5", "mpp4";
+				marvell,function = "uart0";
+			};
+            		pmx_power_off: pmx-power-off {
+                		marvell,pins = "mpp7";
+                		marvell,function = "gpo";
+            		};
+			pmx_power_usb: pmx-power-usb {
+				marvell,pins = "mpp10";
+				marvell,function = "gpo";
+			};
+			pmx_button_ext_hdd: pmx-button-ext-hdd {
+				marvell,pins = "mpp11";
+                		marvell,function = "gpio";
+            		};
+            		pmx_power_sata0: pmx-power-sata0 {
+                		marvell,pins = "mpp15";
+                		marvell,function = "gpio";
+            		};
+            		pmx_button_ext_odd: pmx-button-ext-odd {
+				marvell,pins = "mpp16";
+                		marvell,function = "gpio";
+            		};
+            		pmx_power_sata1: pmx-power-sata1 {
+                		marvell,pins = "mpp17";
+                		marvell,function = "gpio";
+            		};
+            		pmx_power_usb_sense: pmx-power-usb-sense {
+                		marvell,pins = "mpp26";
+                		marvell,function = "gpio";
+            		};
+            		pmx_button_power: pmx-button-power {
+				marvell,pins = "mpp29";
+                		marvell,function = "gpio";
+            		};
+			pmx_led_usb: pmx-led-usb {
+				marvell,pins = "mpp30";
+				marvell,function = "gpio";
+			};
+            		pmx_button_backup: pmx-button-backup {
+				marvell,pins = "mpp31";
+                		marvell,function = "gpio";
+           		 };
+            		pmx_led_odd: pmx-led-odd {
+				marvell,pins = "mpp34";
+				marvell,function = "gpio";
+			};
+            		pmx_led_hdd: pmx-led-hdd {
+				marvell,pins = "mpp35";
+				marvell,function = "gpio";
+			};			
+		};
+        
+		serial@12000 {
+			status = "ok";
+		};
+        
+        spi@10600 {
+			status = "okay";
+
+			flash@0 {
+				#address-cells = <1>;
+				#size-cells = <1>;
+				compatible = "mxicy,mx25l4005a", "jedec,spi-nor";
+				reg = <0>;
+				spi-max-frequency = <20000000>;
+				mode = <0>;
+
+				partition@0 {
+					reg = <0x0 0x80000>;
+					label = "u-boot";
+				};
+			};
+		};
+
+		sata@80000 {
+			status = "okay";
+			nr-ports = <2>;
+		};
+
+	};
+    
+	gpio-leds {
+		compatible = "gpio-leds";
+		pinctrl-0 = < &pmx_led_hdd &pmx_led_odd &pmx_led_usb >;
+		pinctrl-names = "default";
+
+		hdd {
+			label = "status:white:hdd";
+			gpios = <&gpio1 3 GPIO_ACTIVE_HIGH>;
+                        linux,default-trigger = "ide-disk2";
+		};
+		odd {
+			label = "status:white:odd";
+			gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>;
+                        linux,default-trigger = "ide-disk1";
+		};
+		usb {
+			label = "status:white:usb";
+			gpios = <&gpio0 30 GPIO_ACTIVE_HIGH>;
+		};
+	};
+    
+    gpio-keys {
+		compatible = "gpio-keys";
+		#address-cells = <1>;
+		#size-cells = <0>;
+        pinctrl-0 = <&pmx_button_ext_hdd &pmx_button_ext_odd
+			     &pmx_button_power &pmx_button_backup>;
+		pinctrl-names = "default";
+
+		button@1 {
+			label = "EXT HDD";
+			linux,code = <KEY_FN_1>;
+			linux,input-type = <5>;
+            debounce-interval = <1000>;
+			gpios = <&gpio0 11 GPIO_ACTIVE_LOW>;
+		};
+		button@2 {
+			label = "EXT ODD";
+			linux,code = <KEY_FN_2>;
+			linux,input-type = <5>;
+			debounce-interval = <1000>;
+            gpios = <&gpio0 16 GPIO_ACTIVE_LOW>;
+		};
+		button@3 {
+			label = "Power";
+			linux,code = <KEY_POWER>;
+			gpios = <&gpio0 29 GPIO_ACTIVE_HIGH>;
+		};
+        button@4 {
+			label = "Backup";
+			linux,code = <KEY_COPY>;
+			gpios = <&gpio0 31 GPIO_ACTIVE_HIGH>;
+		};
+
+	};
+    
+    	gpio-poweroff {
+		compatible = "gpio-poweroff";
+        	pinctrl-0 = <&pmx_power_off>;
+		pinctrl-names = "default";
+		gpios = <&gpio0 7 GPIO_ACTIVE_LOW>;
+	};
+    
+	regulators {
+		compatible = "simple-bus";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		pinctrl-0 = <&pmx_power_usb &pmx_power_sata0 &pmx_power_sata1>;
+		pinctrl-names = "default";
+
+		usb_power: regulator@1 {
+			compatible = "regulator-fixed";
+			reg = <1>;
+			regulator-name = "USB Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			enable-active-high;
+			regulator-always-on;
+			regulator-boot-on;
+			gpio = <&gpio0 10 GPIO_ACTIVE_HIGH>;
+		};
+        
+        sata0_power: regulator@2 {
+			compatible = "regulator-fixed";
+			reg = <2>;
+			regulator-name = "SATA0 Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			enable-active-high;
+			regulator-always-on;
+			regulator-boot-on;
+			gpio = <&gpio0 15 GPIO_ACTIVE_HIGH>;
+		};
+        
+		sata1_power: regulator@3 {
+			compatible = "regulator-fixed";
+			reg = <3>;
+			regulator-name = "SATA1 Power";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			enable-active-high;
+			regulator-always-on;
+			regulator-boot-on;
+			gpio = <&gpio0 17 GPIO_ACTIVE_HIGH>;
+		};
+	};
+};
+
+&mdio {
+	status = "okay";
+
+	ethphy0: ethernet-phy@8 {
+		reg = <8>;
+	};
+};
+
+&eth0 {
+	status = "okay";
+	ethernet0-port@0 {
+		phy-handle = <&ethphy0>;
+	};
+};
diff -Naur --no-dereference a/arch/arm/boot/dts/Makefile b/arch/arm/boot/dts/Makefile
--- a/arch/arm/boot/dts/Makefile	2019-06-17 10:50:37.000000000 -0700
+++ b/arch/arm/boot/dts/Makefile	2019-06-18 21:25:50.108338005 -0700
@@ -236,14 +236,17 @@
 	keystone-k2g-evm.dtb \
 	keystone-k2g-ice.dtb
 dtb-$(CONFIG_MACH_KIRKWOOD) += \
+	kirkwood-asus_m25.dtb \
 	kirkwood-b3.dtb \
 	kirkwood-blackarmor-nas220.dtb \
+	kirkwood-canvio-home-nas.dtb \
 	kirkwood-cloudbox.dtb \
 	kirkwood-d2net.dtb \
 	kirkwood-db-88f6281.dtb \
 	kirkwood-db-88f6282.dtb \
 	kirkwood-dir665.dtb \
 	kirkwood-dns320.dtb \
+	kirkwood-dns320-b1.dtb \
 	kirkwood-dns325.dtb \
 	kirkwood-dockstar.dtb \
 	kirkwood-dreamplug.dtb \
@@ -260,14 +263,19 @@
 	kirkwood-ds411.dtb \
 	kirkwood-ds411j.dtb \
 	kirkwood-ds411slim.dtb \
+        kirkwood-ea4500.dtb \
+	kirkwood-goflexhome.dtb \
 	kirkwood-goflexnet.dtb \
 	kirkwood-guruplug-server-plus.dtb \
 	kirkwood-ib62x0.dtb \
 	kirkwood-iconnect.dtb \
 	kirkwood-iomega_ix2_200.dtb \
+	kirkwood-iomega_ix4_200d.dtb \
 	kirkwood-is2.dtb \
 	kirkwood-km_kirkwood.dtb \
 	kirkwood-laplug.dtb \
+	kirkwood-lenovo-iomega-ez.dtb \
+	kirkwood-lenovo-ix2-ng.dtb \
 	kirkwood-linkstation-lsqvl.dtb \
 	kirkwood-linkstation-lsvl.dtb \
 	kirkwood-linkstation-lswsxl.dtb \
@@ -276,6 +284,8 @@
 	kirkwood-linksys-viper.dtb \
 	kirkwood-lschlv2.dtb \
 	kirkwood-lsxhl.dtb \
+	kirkwood-m300.dtb \
+	kirkwood-md86783.dtb \
 	kirkwood-mplcec4.dtb \
 	kirkwood-mv88f6281gtw-ge.dtb \
 	kirkwood-nas2big.dtb \
@@ -283,13 +293,18 @@
 	kirkwood-net5big.dtb \
 	kirkwood-netgear_readynas_duo_v2.dtb \
 	kirkwood-netgear_readynas_nv+_v2.dtb \
+	kirkwood-netgear_stora_ms2000.dtb \
+	kirkwood-n1t1.dtb \
 	kirkwood-ns2.dtb \
 	kirkwood-ns2lite.dtb \
 	kirkwood-ns2max.dtb \
 	kirkwood-ns2mini.dtb \
 	kirkwood-nsa310.dtb \
 	kirkwood-nsa310a.dtb \
-	kirkwood-nsa320.dtb \
+	kirkwood-nsa310b-lmsensor-redusbled.dtb \
+        kirkwood-nsa310s.dtb \
+        kirkwood-nsa320.dtb \
+	kirkwood-nsa320s.dtb \
 	kirkwood-nsa325.dtb \
 	kirkwood-openblocks_a6.dtb \
 	kirkwood-openblocks_a7.dtb \
@@ -297,7 +312,8 @@
 	kirkwood-openrd-client.dtb \
 	kirkwood-openrd-ultimate.dtb \
 	kirkwood-pogo_e02.dtb \
-	kirkwood-pogoplug-series-4.dtb \
+        kirkwood-pogoplug_v4.dtb \
+	kirkwood-qizhitong_501m_v2.dtb \
 	kirkwood-rd88f6192.dtb \
 	kirkwood-rd88f6281-z0.dtb \
 	kirkwood-rd88f6281-a.dtb \
@@ -306,6 +322,7 @@
 	kirkwood-rs411.dtb \
 	kirkwood-sheevaplug.dtb \
 	kirkwood-sheevaplug-esata.dtb \
+	kirkwood-silverstore-hncn2.dtb \
 	kirkwood-t5325.dtb \
 	kirkwood-topkick.dtb \
 	kirkwood-ts219-6281.dtb \
diff -Naur --no-dereference a/arch/arm/tools/mach-types b/arch/arm/tools/mach-types
--- a/arch/arm/tools/mach-types	2019-06-17 10:50:37.000000000 -0700
+++ b/arch/arm/tools/mach-types	2019-06-18 21:25:50.128328005 -0700
@@ -118,6 +118,7 @@
 omap_osk		MACH_OMAP_OSK		OMAP_OSK		515
 tosa			MACH_TOSA		TOSA			520
 avila			MACH_AVILA		AVILA			526
+n1t1            MACH_N1T1       N1T1            527
 edb9302			MACH_EDB9302		EDB9302			538
 husky			MACH_HUSKY		HUSKY			543
 shepherd		MACH_SHEPHERD		SHEPHERD		545
@@ -599,3 +600,13 @@
 remarkable		MACH_REMARKABLE		REMARKABLE		5106
 fa0113			MACH_FA0113		FA0113			5107
 innova_statnettawm	MACH_INNOVA_STATNETTAWM	INNOVA_STATNETTAWM	5108
+goflexnet		MACH_GOFLEXNET		GOFLEXNET		3089
+goflexhome		MACH_GOFLEXHOME		GOFLEXHOME		3338
+iconnect		MACH_ICONNECT		ICONNECT		2870
+pogo_e02		MACH_POGO_E02		POGO_E02		3542
+nsa320			MACH_NSA320		NSA320			3956
+pogoplugv4		MACH_POGOPLUGV4		POGOPLUGV4		3960
+pogoplugv3		MACH_POGOPLUGV3		POGOPLUGV3		3973
+pogoplugv3pci		MACH_POGOPLUGV3PCI	POGOPLUGV3PCI		3976
+nsa310			MACH_NSA310		NSA310			4022
+nsa310s                 MACH_NSA310S            NSA310S                 4931
diff -Naur --no-dereference a/drivers/ata/libata-core.c b/drivers/ata/libata-core.c
--- a/drivers/ata/libata-core.c	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/ata/libata-core.c	2019-06-18 21:25:50.168308004 -0700
@@ -5,6 +5,7 @@
  *    		    Please ALWAYS copy linux-ide@vger.kernel.org
  *		    on emails.
  *
+ *  Copyright 2016 bodhi <mibodhi@gmail.com>
  *  Copyright 2003-2004 Red Hat, Inc.  All rights reserved.
  *  Copyright 2003-2004 Jeff Garzik
  *
@@ -5250,7 +5251,7 @@
 	struct ata_port *ap = qc->ap;
 
 	/* Trigger the LED (if available) */
-	ledtrig_disk_activity(!!(qc->tf.flags & ATA_TFLAG_WRITE));
+ 	ledtrig_disk_activity(qc->ap->port_no, !!(qc->tf.flags & ATA_TFLAG_WRITE));
 
 	/* XXX: New EH and old EH use different mechanisms to
 	 * synchronize EH with regular execution path.
diff -Naur --no-dereference a/drivers/base/Kconfig b/drivers/base/Kconfig
--- a/drivers/base/Kconfig	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/base/Kconfig	2019-06-18 21:25:50.188298004 -0700
@@ -164,6 +164,7 @@
 
 config GENERIC_CPU_VULNERABILITIES
 	bool
+	default y
 
 config SOC_BUS
 	bool
diff -Naur --no-dereference a/drivers/clk/mvebu/kirkwood.c b/drivers/clk/mvebu/kirkwood.c
--- a/drivers/clk/mvebu/kirkwood.c	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/clk/mvebu/kirkwood.c	2019-06-18 21:25:50.198293004 -0700
@@ -41,8 +41,9 @@
  *	5 = (1/4) * CPU
  *	others reserved.
  *
- * SAR0[8:5] : CPU to DDR DRAM Clock divider ratio (6281,6292,6282)
+ * SAR0[8:5] : CPU to DDR DRAM Clock divider ratio (6281,6292,6282,6283)
  *	2 = (1/2) * CPU
+ *      3 = (2/5) * CPU
  *	4 = (1/3) * CPU
  *	6 = (1/4) * CPU
  *	7 = (2/9) * CPU
@@ -117,7 +118,7 @@
 };
 
 static const int kirkwood_cpu_ddr_ratios[16][2] __initconst = {
-	{ 0, 1 }, { 0, 1 }, { 1, 2 }, { 0, 1 },
+	{ 0, 1 }, { 0, 1 }, { 1, 2 }, { 2, 5 },
 	{ 1, 3 }, { 0, 1 }, { 1, 4 }, { 2, 9 },
 	{ 1, 5 }, { 1, 6 }, { 0, 1 }, { 0, 1 },
 	{ 0, 1 }, { 0, 1 }, { 0, 1 }, { 0, 1 }
diff -Naur --no-dereference a/drivers/leds/Kconfig b/drivers/leds/Kconfig
--- a/drivers/leds/Kconfig	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/leds/Kconfig	2019-06-18 21:25:50.208288003 -0700
@@ -766,6 +766,106 @@
 	  To compile this driver as a module, choose M here: the module
 	  will be called leds-nic78bx.
 
+config LEDS_TRIGGERS
+ 	bool "LED Trigger support"
+ 	depends on LEDS_CLASS
+ 	help
+ 	  This option enables trigger support for the leds class.
+ 	  These triggers allow kernel events to drive the LEDs and can
+ 	  be configured via sysfs. If unsure, say Y.
+ 
+ 
+ config LEDS_TRIGGER_TIMER
+ 	tristate "LED Timer Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by a programmable timer
+ 	  via sysfs. Some LED hardware can be programmed to start
+ 	  blinking the LED without any further software interaction.
+ 	  For more details read Documentation/leds/leds-class.txt.
+ 
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_ONESHOT
+ 	tristate "LED One-shot Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to blink in one-shot pulses with parameters
+ 	  controlled via sysfs.  It's useful to notify the user on
+ 	  sporadic events, when there are no clear begin and end trap points,
+ 	  or on dense events, where this blinks the LED at constant rate if
+ 	  rearmed continuously.
+ 
+ 	  It also shows how to use the led_blink_set_oneshot() function.
+ 
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_IDE_DISK
+ 	bool "LED IDE Disk Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by IDE disk activity.
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_HEARTBEAT
+ 	tristate "LED Heartbeat Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by a CPU load average.
+ 	  The flash frequency is a hyperbolic function of the 1-minute
+ 	  load average.
+ 	  If unsure, say Y.
+ 
+ config LEDS_TRIGGER_BACKLIGHT
+ 	tristate "LED backlight Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled as a backlight device: they
+ 	  turn off and on when the display is blanked and unblanked.
+ 
+ 	  If unsure, say N.
+ 
+ config LEDS_TRIGGER_CPU
+ 	bool "LED CPU Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be controlled by active CPUs. This shows
+ 	  the active CPUs across an array of LEDs so you can see which
+ 	  CPUs are active on the system at any given moment.
+ 
+ 	  If unsure, say N.
+ 
+ config LEDS_TRIGGER_GPIO
+ 	tristate "LED GPIO Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	depends on GPIOLIB
+ 	help
+ 	  This allows LEDs to be controlled by gpio events. It's good
+ 	  when using gpios as switches and triggering the needed LEDs
+ 	  from there. One use case is n810's keypad LEDs that could
+ 	  be triggered by this trigger when user slides up to show
+ 	  keypad.
+ 
+ 	  If unsure, say N.
+ 
+ config LEDS_TRIGGER_DEFAULT_ON
+ 	tristate "LED Default ON Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows LEDs to be initialised in the ON state.
+ 	  If unsure, say Y.
+ 
+ comment "iptables trigger is under Netfilter config (LED target)"
+ 	depends on LEDS_TRIGGERS
+ 
+ config LEDS_TRIGGER_TRANSIENT
+ 	tristate "LED Transient Trigger"
+ 	depends on LEDS_TRIGGERS
+ 	help
+ 	  This allows one time activation of a transient state on
+ 	  GPIO/PWM based hardware.
+ 	  If unsure, say Y
+
 comment "LED Triggers"
 source "drivers/leds/trigger/Kconfig"
 
diff -Naur --no-dereference a/drivers/leds/trigger/ledtrig-disk.c b/drivers/leds/trigger/ledtrig-disk.c
--- a/drivers/leds/trigger/ledtrig-disk.c	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/leds/trigger/ledtrig-disk.c	2019-06-18 21:25:50.218283003 -0700
@@ -1,6 +1,9 @@
 /*
  * LED Disk Activity Trigger
  *
+ * Copyright 2018 bodhi <mibodhi@gmail.com>
+ * 
+ * Based on
  * Copyright 2006 Openedhand Ltd.
  *
  * Author: Richard Purdie <rpurdie@openedhand.com>
@@ -20,22 +23,43 @@
 DEFINE_LED_TRIGGER(ledtrig_disk);
 DEFINE_LED_TRIGGER(ledtrig_disk_read);
 DEFINE_LED_TRIGGER(ledtrig_disk_write);
-DEFINE_LED_TRIGGER(ledtrig_ide);
+DEFINE_LED_TRIGGER(ledtrig_ide1);
+DEFINE_LED_TRIGGER(ledtrig_ide2);
 
-void ledtrig_disk_activity(bool write)
+void ledtrig_disk_activity(int portno, bool write)
 {
 	unsigned long blink_delay = BLINK_DELAY;
 
-	led_trigger_blink_oneshot(ledtrig_disk,
-				  &blink_delay, &blink_delay, 0);
-	led_trigger_blink_oneshot(ledtrig_ide,
-				  &blink_delay, &blink_delay, 0);
-	if (write)
-		led_trigger_blink_oneshot(ledtrig_disk_write,
-					  &blink_delay, &blink_delay, 0);
-	else
-		led_trigger_blink_oneshot(ledtrig_disk_read,
-					  &blink_delay, &blink_delay, 0);
+ 	switch (portno) {
+ 		case 0:
+			led_trigger_blink_oneshot(ledtrig_disk,
+						  &blink_delay, &blink_delay, 0);
+
+			if (write)
+				led_trigger_blink_oneshot(ledtrig_disk_write,
+					&blink_delay, &blink_delay, 0);
+			else
+				led_trigger_blink_oneshot(ledtrig_disk_read,
+					&blink_delay, &blink_delay, 0);
+
+ 		        led_trigger_blink_oneshot(ledtrig_ide1, &blink_delay, &blink_delay, 0);
+ 			break;
+         	case 1:
+			led_trigger_blink_oneshot(ledtrig_disk,
+						  &blink_delay, &blink_delay, 0);
+                        if (write)
+                                led_trigger_blink_oneshot(ledtrig_disk_write,
+                                        &blink_delay, &blink_delay, 0);
+                        else
+                                led_trigger_blink_oneshot(ledtrig_disk_read,
+                                        &blink_delay, &blink_delay, 0);
+
+ 			led_trigger_blink_oneshot(ledtrig_ide2, &blink_delay, &blink_delay, 0);
+ 			break;
+ 		default:
+ 			break;
+ 	}
+
 }
 EXPORT_SYMBOL(ledtrig_disk_activity);
 
@@ -44,7 +68,8 @@
 	led_trigger_register_simple("disk-activity", &ledtrig_disk);
 	led_trigger_register_simple("disk-read", &ledtrig_disk_read);
 	led_trigger_register_simple("disk-write", &ledtrig_disk_write);
-	led_trigger_register_simple("ide-disk", &ledtrig_ide);
+ 	led_trigger_register_simple("ide-disk1", &ledtrig_ide1);
+ 	led_trigger_register_simple("ide-disk2", &ledtrig_ide2);
 
 	return 0;
 }
diff -Naur --no-dereference a/drivers/media/rc/Kconfig b/drivers/media/rc/Kconfig
--- a/drivers/media/rc/Kconfig	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/media/rc/Kconfig	2019-06-18 21:25:50.228278003 -0700
@@ -43,6 +43,18 @@
 	depends on RC_CORE
 
 if RC_DECODERS
+
+config LIRC_RPI
+        tristate "LIRC RPI interface driver"
+        depends on RC_CORE
+
+        ---help---
+           Enable this option to build the (modified version for RPI) Linux Infrared Remote
+           Control (LIRC) core device interface driver. The LIRC
+           interface passes raw IR to and from userspace, where the
+           LIRC daemon handles protocol decoding for IR reception and
+           encoding for IR transmitting (aka "blasting").
+
 config IR_NEC_DECODER
 	tristate "Enable IR raw decoder for the NEC protocol"
 	depends on RC_CORE
diff -Naur --no-dereference a/drivers/media/rc/lirc_rpi.c b/drivers/media/rc/lirc_rpi.c
--- a/drivers/media/rc/lirc_rpi.c	1969-12-31 16:00:00.000000000 -0800
+++ b/drivers/media/rc/lirc_rpi.c	2019-06-18 21:25:50.228278003 -0700
@@ -0,0 +1,797 @@
+/*
+ * lirc_rpi.c
+ *
+ * lirc_rpi - Device driver that records pulse- and pause-lengths
+ *	      (space-lengths) (just like the lirc_serial driver does)
+ *	      between GPIO interrupt events on the Raspberry Pi.
+ *	      Lots of code has been taken from the lirc_serial module,
+ *	      so I would like say thanks to the authors.
+ *
+ * Copyright (C) 2012 Aron Robert Szabo <aron@reon.hu>,
+ *		      Michael Bishop <cleverca22@gmail.com>
+ *		      Bengt Martensson <barf@bengt-martensson.de>
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/module.h>
+#include <linux/errno.h>
+#include <linux/interrupt.h>
+#include <linux/sched.h>
+#include <linux/kernel.h>
+#include <linux/time.h>
+#include <linux/string.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/irq.h>
+#include <linux/spinlock.h>
+#include <media/lirc.h>
+#include <media/lirc_dev.h>
+#include <linux/gpio.h>
+
+#define LIRC_DRIVER_NAME "lirc_rpi"
+/*#define RBUF_LEN 256*/
+#define RBUF_LEN 1024
+#define LIRC_TRANSMITTER_LATENCY 256
+
+#ifndef MAX_UDELAY_MS
+#define MAX_UDELAY_US 5000
+#else
+#define MAX_UDELAY_US (MAX_UDELAY_MS*1000)
+#endif
+
+#define LIRC_RPI_MAX_TRANSMITTERS 8
+#define INVALID -1
+
+#define dprintk(fmt, args...)					\
+	do {							\
+		if (debug)					\
+			printk(KERN_DEBUG LIRC_DRIVER_NAME ": "	\
+			       fmt, ## args);			\
+	} while (0)
+
+/* module parameters */
+
+/* set the default GPIO input pin */
+static int gpio_in_pin = INVALID;
+/* set the default GPIO output pins */
+/* Note: LIRC appears to number the transmitters starting with 1, not 0. */
+static int gpio_out_pins[LIRC_RPI_MAX_TRANSMITTERS] =
+	{INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID, INVALID};
+/* actual number of configured transmitters */
+static int n_transmitters = 0;
+/* enable debugging messages */
+static int debug;
+/* INVALID = auto, 0 = active high, 1 = active low */
+static int sense = INVALID;
+/* use softcarrier by default */
+static int softcarrier = 1;
+/* 0 = do not invert output, 1 = invert output */
+static int invert = 0;
+/* Transmit mask */
+unsigned int tx_mask = 1; /* First transmitter (#1) selected */
+
+struct gpio_chip *gpiochip;
+struct irq_chip *irqchip;
+struct irq_data *irqdata;
+
+/* forward declarations */
+static long send_pulse(unsigned long length);
+static void send_space(long length);
+static void lirc_rpi_exit(void);
+
+int valid_gpio_pins[] = { 0, 1, 4, 8, 7, 9, 10, 11, 14, 15, 17, 18, 21, 22, 23,
+	24, 25 };
+
+static struct platform_device *lirc_rpi_dev;
+static struct timeval lasttv = { 0, 0 };
+static struct lirc_buffer rbuf;
+static spinlock_t lock;
+
+/* initialized/set in init_timing_params() */
+static unsigned int freq = 38000;
+static unsigned int duty_cycle = 50;
+static unsigned long period;
+static unsigned long pulse_width;
+static unsigned long space_width;
+
+static int inline transmitter_enabled(int n) {
+	return tx_mask & (1 << n);
+}
+
+static void inline gpio_setpin(int pin, int value) {
+	gpiochip->set(gpiochip, pin, value ^ invert);
+}
+
+static void safe_udelay(unsigned long usecs)
+{
+	while (usecs > MAX_UDELAY_US) {
+		udelay(MAX_UDELAY_US);
+		usecs -= MAX_UDELAY_US;
+	}
+	udelay(usecs);
+}
+
+static int init_timing_params(unsigned int new_duty_cycle,
+	unsigned int new_freq)
+{
+	/*
+	 * period, pulse/space width are kept with 8 binary places -
+	 * IE multiplied by 256.
+	 */
+ 	if (new_freq > 0) {
+		if (256 * 1000000L / new_freq * new_duty_cycle / 100 <=
+		    LIRC_TRANSMITTER_LATENCY)
+			return -EINVAL;
+		if (256 * 1000000L / new_freq * (100 - new_duty_cycle) / 100 <=
+		    LIRC_TRANSMITTER_LATENCY)
+			return -EINVAL;
+		duty_cycle = new_duty_cycle;
+		freq = new_freq;
+		period = 256 * 1000000L / freq;
+		pulse_width = period * duty_cycle / 100;
+		space_width = period - pulse_width;
+	} else {
+		duty_cycle = INVALID;
+		freq = 0;
+		period = INVALID;
+		pulse_width = INVALID;
+		space_width = INVALID;
+	}
+	dprintk("in init_timing_params, freq=%d pulse=%ld, "
+		"space=%ld\n", freq, pulse_width, space_width);
+	return 0;
+}
+
+static long send_pulse_softcarrier(unsigned long length)
+{
+	int flag, i;
+	unsigned long actual, target, d;
+
+	length <<= 8;
+
+	actual = 0; target = 0; flag = 0;
+	while (actual < length) {
+		for (i = 0; i < n_transmitters; i++)
+			if (transmitter_enabled(i))
+				gpio_setpin(gpio_out_pins[i], !flag);
+		target += flag ? space_width : pulse_width;
+		
+		d = (target - actual -
+		     LIRC_TRANSMITTER_LATENCY + 128) >> 8;
+		/*
+		 * Note - we've checked in ioctl that the pulse/space
+		 * widths are big enough so that d is > 0
+		 */
+		udelay(d);
+		actual += (d << 8) + LIRC_TRANSMITTER_LATENCY;
+		flag = !flag;
+	}
+	return (actual-length) >> 8;
+}
+
+static long send_pulse(unsigned long length)
+{
+	int i;
+	if (length <= 0)
+		return 0;
+
+	if (softcarrier && freq > 0) {
+		return send_pulse_softcarrier(length);
+	} else {
+		for (i = 0; i < n_transmitters; i++)
+			if (transmitter_enabled(i))
+				gpio_setpin(gpio_out_pins[i], 1);
+		
+		safe_udelay(length);
+		return 0;
+	}
+}
+
+static void send_space(long length)
+{
+	int i;
+	for (i = 0; i < n_transmitters; i++)
+		gpio_setpin(gpio_out_pins[i], 0);
+	if (length <= 0)
+		return;
+	safe_udelay(length);
+}
+
+static void rbwrite(int l)
+{
+	if (lirc_buffer_full(&rbuf)) {
+		/* no new signals will be accepted */
+		dprintk("Buffer overrun\n");
+		return;
+	}
+	lirc_buffer_write(&rbuf, (void *)&l);
+}
+
+static void frbwrite(int l)
+{
+	/* simple noise filter */
+	static int pulse, space;
+	static unsigned int ptr;
+
+	if (ptr > 0 && (l & PULSE_BIT)) {
+		pulse += l & PULSE_MASK;
+		if (pulse > 250) {
+			rbwrite(space);
+			rbwrite(pulse | PULSE_BIT);
+			ptr = 0;
+			pulse = 0;
+		}
+		return;
+	}
+	if (!(l & PULSE_BIT)) {
+		if (ptr == 0) {
+			if (l > 20000) {
+				space = l;
+				ptr++;
+				return;
+			}
+		} else {
+			if (l > 20000) {
+				space += pulse;
+				if (space > PULSE_MASK)
+					space = PULSE_MASK;
+				space += l;
+				if (space > PULSE_MASK)
+					space = PULSE_MASK;
+				pulse = 0;
+				return;
+			}
+			rbwrite(space);
+			rbwrite(pulse | PULSE_BIT);
+			ptr = 0;
+			pulse = 0;
+		}
+	}
+	rbwrite(l);
+}
+
+static irqreturn_t irq_handler(int i, void *blah, struct pt_regs *regs)
+{
+	struct timeval tv;
+	long deltv;
+	int data;
+	int signal;
+
+	/* use the GPIO signal level */
+	signal = gpiochip->get(gpiochip, gpio_in_pin);
+
+	/* unmask the irq */
+	irqchip->irq_unmask(irqdata);
+
+	if (sense != INVALID) {
+		/* get current time */
+		do_gettimeofday(&tv);
+
+		/* calc time since last interrupt in microseconds */
+		deltv = tv.tv_sec-lasttv.tv_sec;
+		if (tv.tv_sec < lasttv.tv_sec ||
+		    (tv.tv_sec == lasttv.tv_sec &&
+		     tv.tv_usec < lasttv.tv_usec)) {
+			printk(KERN_WARNING LIRC_DRIVER_NAME
+			       ": AIEEEE: your clock just jumped backwards\n");
+			printk(KERN_WARNING LIRC_DRIVER_NAME
+			       ": %d %d %lx %lx %lx %lx\n", signal, sense,
+			       tv.tv_sec, lasttv.tv_sec,
+			       tv.tv_usec, lasttv.tv_usec);
+			data = PULSE_MASK;
+		} else if (deltv > 15) {
+			data = PULSE_MASK; /* really long time */
+			if (!(signal^sense)) {
+				/* sanity check */
+				printk(KERN_WARNING LIRC_DRIVER_NAME
+				       ": AIEEEE: %d %d %lx %lx %lx %lx\n",
+				       signal, sense, tv.tv_sec, lasttv.tv_sec,
+				       tv.tv_usec, lasttv.tv_usec);
+				/*
+				 * detecting pulse while this
+				 * MUST be a space!
+				 */
+				sense = sense ? 0 : 1;
+			}
+		} else {
+			data = (int) (deltv*1000000 +
+				      (tv.tv_usec - lasttv.tv_usec));
+		}
+		frbwrite(signal^sense ? data : (data|PULSE_BIT));
+		lasttv = tv;
+		wake_up_interruptible(&rbuf.wait_poll);
+	}
+
+	return IRQ_HANDLED;
+}
+
+static int is_right_chip(struct gpio_chip *chip, void *data)
+{
+	dprintk("is_right_chip %s %d\n", chip->label, strcmp(data, chip->label));
+
+	if (strcmp(data, chip->label) == 0)
+		return 1;
+	return 0;
+}
+
+static int init_port(void)
+{
+	int i, nlow, nhigh, ret, irq;
+
+	gpiochip = gpiochip_find("bcm2708_gpio", is_right_chip);
+
+	if (!gpiochip)
+		return -ENODEV;
+
+	for (i = 0; i < n_transmitters; i++) {
+		if (gpio_request(gpio_out_pins[i], LIRC_DRIVER_NAME " ir/out")) {
+			printk(KERN_ALERT LIRC_DRIVER_NAME
+			       ": cant claim gpio pin %d\n", gpio_out_pins[i]);
+			ret = -ENODEV;
+			goto exit_init_port;
+		}
+	}
+
+	if (gpio_in_pin != INVALID && gpio_request(gpio_in_pin, LIRC_DRIVER_NAME " ir/in")) {
+		printk(KERN_ALERT LIRC_DRIVER_NAME
+		       ": cant claim gpio pin %d\n", gpio_in_pin);
+		ret = -ENODEV;
+		goto exit_gpio_free_out_pin;
+	}
+
+	gpiochip->direction_input(gpiochip, gpio_in_pin);
+	for (i = 0; i < n_transmitters; i++) {
+		gpiochip->direction_output(gpiochip, gpio_out_pins[i], 1);
+		gpio_setpin(gpio_out_pins[i], 0);
+		dprintk("Pin %d set up as transmitter #%d\n",
+			gpio_out_pins[i], i+1);
+	}
+
+	irq = gpiochip->to_irq(gpiochip, gpio_in_pin);
+	dprintk("to_irq %d\n", irq);
+	irqdata = irq_get_irq_data(irq);
+
+	if (irqdata && irqdata->chip) {
+		irqchip = irqdata->chip;
+	} else {
+		ret = -ENODEV;
+		goto exit_gpio_free_in_pin;
+	}
+
+	/* if pin is high, then this must be an active low receiver. */
+	if (gpio_in_pin == INVALID) /* Nothing to check */
+		return 0;
+	if (sense == INVALID) {
+		/* wait 1/2 sec for the power supply */
+		msleep(500);
+
+		/*
+		 * probe 9 times every 0.04s, collect "votes" for
+		 * active high/low
+		 */
+		nlow = 0;
+		nhigh = 0;
+		for (i = 0; i < 9; i++) {
+			if (gpiochip->get(gpiochip, gpio_in_pin))
+				nlow++;
+			else
+				nhigh++;
+			msleep(40);
+		}
+		sense = (nlow >= nhigh ? 1 : 0);
+		printk(KERN_INFO LIRC_DRIVER_NAME
+		       ": auto-detected active %s receiver on GPIO pin %d\n",
+		       sense ? "low" : "high", gpio_in_pin);
+	} else {
+		printk(KERN_INFO LIRC_DRIVER_NAME
+		       ": manually using active %s receiver on GPIO pin %d\n",
+		       sense ? "low" : "high", gpio_in_pin);
+	}
+
+	return 0;
+
+	exit_gpio_free_in_pin:
+	gpio_free(gpio_in_pin);
+
+	exit_gpio_free_out_pin:
+	for (i = 0; i < n_transmitters; i++) {
+		gpio_free(gpio_out_pins[i]);
+	}
+
+	exit_init_port:
+	return ret;
+}
+
+/* called when the character device is opened */
+static int set_use_inc(void *data)
+{
+	int result;
+	unsigned long flags;
+
+	/* initialize timestamp */
+	do_gettimeofday(&lasttv);
+
+	result = request_irq(gpiochip->to_irq(gpiochip, gpio_in_pin),
+			     (irq_handler_t) irq_handler, 0,
+			     LIRC_DRIVER_NAME, (void*) 0);
+
+	switch (result) {
+	case -EBUSY:
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": IRQ %d is busy\n",
+		       gpiochip->to_irq(gpiochip, gpio_in_pin));
+		return -EBUSY;
+	case -EINVAL:
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": Bad irq number or handler\n");
+		return -EINVAL;
+	default:
+		dprintk("Interrupt %d obtained\n",
+			gpiochip->to_irq(gpiochip, gpio_in_pin));
+		break;
+	};
+
+	/* initialize pulse/space widths */
+	init_timing_params(duty_cycle, freq);
+
+	spin_lock_irqsave(&lock, flags);
+
+	/* GPIO Pin Falling/Rising Edge Detect Enable */
+	irqchip->irq_set_type(irqdata,
+			      IRQ_TYPE_EDGE_RISING | IRQ_TYPE_EDGE_FALLING);
+
+	/* unmask the irq */
+	irqchip->irq_unmask(irqdata);
+
+	spin_unlock_irqrestore(&lock, flags);
+
+	return 0;
+}
+
+static void set_use_dec(void *data)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&lock, flags);
+
+	/* GPIO Pin Falling/Rising Edge Detect Disable */
+	irqchip->irq_set_type(irqdata, 0);
+	irqchip->irq_mask(irqdata);
+
+	spin_unlock_irqrestore(&lock, flags);
+
+	free_irq(gpiochip->to_irq(gpiochip, gpio_in_pin), (void *) 0);
+
+	dprintk(KERN_INFO LIRC_DRIVER_NAME
+		": freed IRQ %d\n", gpiochip->to_irq(gpiochip, gpio_in_pin));
+}
+
+static ssize_t lirc_write(struct file *file, const char *buf,
+	size_t n, loff_t *ppos)
+{
+	int i, count;
+	unsigned long flags;
+	long delta = 0;
+	int *wbuf;
+
+	count = n / sizeof(int);
+	if (n % sizeof(int) || count % 2 == 0)
+		return -EINVAL;
+	wbuf = memdup_user(buf, n);
+	if (IS_ERR(wbuf))
+		return PTR_ERR(wbuf);
+	spin_lock_irqsave(&lock, flags);
+
+	for (i = 0; i < count; i++) {
+		if (i%2)
+			send_space(wbuf[i] - delta);
+		else
+			delta = send_pulse(wbuf[i]);
+	}
+	for (i = 0; i < n_transmitters; i++)
+		gpio_setpin(gpio_out_pins[i], 0);
+
+	spin_unlock_irqrestore(&lock, flags);
+	kfree(wbuf);
+	return n;
+}
+
+static long lirc_ioctl(struct file *filep, unsigned int cmd, unsigned long arg)
+{
+	int result;
+	__u32 value;
+
+	switch (cmd) {
+	case LIRC_GET_SEND_MODE:
+		return -ENOIOCTLCMD;
+		break;
+
+	case LIRC_SET_SEND_MODE:
+		result = get_user(value, (__u32 *) arg);
+		if (result)
+			return result;
+		/* only LIRC_MODE_PULSE supported */
+		if (value != LIRC_MODE_PULSE)
+			return -ENOSYS;
+		break;
+
+	case LIRC_GET_LENGTH:
+		return -ENOSYS;
+		break;
+
+	case LIRC_SET_SEND_DUTY_CYCLE:
+		dprintk("SET_SEND_DUTY_CYCLE\n");
+		result = get_user(value, (__u32 *) arg);
+		if (result)
+			return result;
+		if (value <= 0 || value > 100)
+			return -EINVAL;
+		return init_timing_params(value, freq);
+		break;
+
+	case LIRC_SET_SEND_CARRIER:
+		dprintk("SET_SEND_CARRIER\n");
+		result = get_user(value, (__u32 *) arg);
+		if (result)
+			return result;
+		/* if (value > 500000 || value < 20000) */
+		if (value > 500000 || value < 0)
+			return -EINVAL;
+		return init_timing_params(duty_cycle, value);
+		break;
+
+	case LIRC_SET_TRANSMITTER_MASK:
+		dprintk("SET_TRANSMITTER_MASK\n");
+		result = get_user(value, (__u32 *) arg);
+		if (result)
+			return result;
+		if ((value & ((1 << n_transmitters) - 1)) != value)
+			return n_transmitters;
+		tx_mask = value;
+		break;
+
+	default:
+		return lirc_dev_fop_ioctl(filep, cmd, arg);
+	}
+	return 0;
+}
+
+static const struct file_operations lirc_fops = {
+	.owner		= THIS_MODULE,
+	.write		= lirc_write,
+	.unlocked_ioctl	= lirc_ioctl,
+	.read		= lirc_dev_fop_read,
+	.poll		= lirc_dev_fop_poll,
+	.open		= lirc_dev_fop_open,
+	.release	= lirc_dev_fop_close,
+	.llseek		= no_llseek,
+};
+
+static struct lirc_driver driver = {
+	.name		= LIRC_DRIVER_NAME,
+	.minor		= INVALID,
+	.code_length	= 1,
+	.sample_rate	= 0,
+	.data		= NULL,
+	.add_to_buf	= NULL,
+	.rbuf		= &rbuf,
+	.set_use_inc	= set_use_inc,
+	.set_use_dec	= set_use_dec,
+	.fops		= &lirc_fops,
+	.dev		= NULL,
+	.owner		= THIS_MODULE,
+};
+
+static struct platform_driver lirc_rpi_driver = {
+	.driver = {
+		.name   = LIRC_DRIVER_NAME,
+		.owner  = THIS_MODULE,
+	},
+};
+
+static int __init lirc_rpi_init(void)
+{
+	int result;
+
+	/* Init read buffer. */
+	result = lirc_buffer_init(&rbuf, sizeof(int), RBUF_LEN);
+	if (result < 0)
+		return -ENOMEM;
+
+	result = platform_driver_register(&lirc_rpi_driver);
+	if (result) {
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": lirc register returned %d\n", result);
+		goto exit_buffer_free;
+	}
+
+	lirc_rpi_dev = platform_device_alloc(LIRC_DRIVER_NAME, 0);
+	if (!lirc_rpi_dev) {
+		result = -ENOMEM;
+		goto exit_driver_unregister;
+	}
+
+	result = platform_device_add(lirc_rpi_dev);
+	if (result)
+		goto exit_device_put;
+
+	return 0;
+
+	exit_device_put:
+	platform_device_put(lirc_rpi_dev);
+
+	exit_driver_unregister:
+	platform_driver_unregister(&lirc_rpi_driver);
+
+	exit_buffer_free:
+	lirc_buffer_free(&rbuf);
+
+	return result;
+}
+
+static void lirc_rpi_exit(void)
+{
+	int i;
+	for (i = 0; i < n_transmitters; i++)
+		gpio_free(gpio_out_pins[i]);
+	if (gpio_in_pin != INVALID)
+		gpio_free(gpio_in_pin);
+	platform_device_unregister(lirc_rpi_dev);
+	platform_driver_unregister(&lirc_rpi_driver);
+	lirc_buffer_free(&rbuf);
+}
+
+static int __init lirc_rpi_init_module(void)
+{
+	int result, i, j;
+	int in_pin_ok = 0;
+
+	result = lirc_rpi_init();
+	if (result)
+		return result;
+
+	/* check if the module received valid gpio pin numbers */
+	/* loader checks that n_transmitters <= LIRC_RPI_MAX_TRANSMITTERS) */
+	result = 0;
+	for (i = 0; i < ARRAY_SIZE(valid_gpio_pins); i++) {
+		if  (gpio_in_pin == valid_gpio_pins[i])
+			in_pin_ok = 1;
+		for (j = 0; j < n_transmitters; j++) {
+			if (gpio_out_pins[j] == gpio_in_pin) {
+				result = -EINVAL;
+				printk(KERN_ERR LIRC_DRIVER_NAME
+				       ": GPIO in-pin %d is also output!\n",
+				       gpio_in_pin);
+				goto exit_rpi;
+			}
+			if (gpio_out_pins[j] == valid_gpio_pins[i]) {
+				result++;
+				break; /* Count every pin only once */
+			}
+		}
+	}
+	if (n_transmitters == 0) {
+		if (gpio_in_pin == INVALID) {
+			result = -EINVAL;
+			printk(KERN_ERR LIRC_DRIVER_NAME
+			       ": no GPIO in- or outpins specified.\n");
+			goto exit_rpi;
+		} else {
+			printk(KERN_WARNING LIRC_DRIVER_NAME
+			       ": no GPIO outpins specified, probably desired.\n");
+		}
+	} else if (result != n_transmitters) {
+		result = -EINVAL;
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": invalid GPIO output pin(s) specified!\n");
+		goto exit_rpi;
+	}
+	if (gpio_in_pin == INVALID)
+		printk(KERN_WARNING LIRC_DRIVER_NAME
+		       ": no GPIO inpin specified, probably desired.\n");
+	else if (in_pin_ok != 1) {
+		result = -EINVAL;
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": invalid GPIO inpin specified!\n");
+		goto exit_rpi;
+	}
+
+	if (n_transmitters > 0 &&
+	    (tx_mask & ((1 << n_transmitters) - 1)) != tx_mask) {
+		result = -EINVAL;
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": tx_mask incompatible with %d transmitters "
+		       "specified!\n", n_transmitters);
+		goto exit_rpi;
+	}
+
+	driver.features = 0;
+	if (n_transmitters > 0)
+		driver.features |= LIRC_CAN_SEND_PULSE;
+	if (softcarrier)
+		driver.features |= LIRC_CAN_SET_SEND_DUTY_CYCLE | 
+		  LIRC_CAN_SET_SEND_CARRIER;
+	if (gpio_in_pin != INVALID)
+		driver.features |= LIRC_CAN_REC_MODE2;
+	if (n_transmitters > 1)
+		driver.features |= LIRC_CAN_SET_TRANSMITTER_MASK;
+
+	driver.dev = &lirc_rpi_dev->dev;
+	driver.minor = lirc_register_driver(&driver);
+
+	if (driver.minor < 0) {
+		printk(KERN_ERR LIRC_DRIVER_NAME
+		       ": device registration failed with %d\n", result);
+		result = -EIO;
+		goto exit_rpi;
+	}
+
+	printk(KERN_INFO LIRC_DRIVER_NAME ": driver registered!\n");
+
+	result = init_port();
+	if (result < 0)
+		goto exit_rpi;
+
+	return 0;
+
+	exit_rpi:
+	lirc_rpi_exit();
+
+	return result;
+}
+
+static void __exit lirc_rpi_exit_module(void)
+{
+	lirc_rpi_exit();
+
+	lirc_unregister_driver(driver.minor);
+	printk(KERN_INFO LIRC_DRIVER_NAME ": cleaned up module\n");
+}
+
+module_init(lirc_rpi_init_module);
+module_exit(lirc_rpi_exit_module);
+
+MODULE_DESCRIPTION("Infra-red receiver and blaster driver for Raspberry Pi GPIO.");
+MODULE_AUTHOR("Aron Robert Szabo <aron@reon.hu>");
+MODULE_AUTHOR("Michael Bishop <cleverca22@gmail.com>");
+MODULE_AUTHOR("Bengt Martensson <barf@bengt-martensson.de>");
+MODULE_LICENSE("GPL");
+
+module_param_array(gpio_out_pins, int, &n_transmitters, S_IRUGO);
+MODULE_PARM_DESC(gpio_out_pins, "GPIO output/transmitter pins of the BCM"
+		 " processor as array. The first is called transmitter #1 "
+		 "(not 0). Valid pin numbers are: 0, 1, 4, 8, 7, 9, 10, 11,"
+		 " 14, 15, 17, 18, 21, 22, 23, 24, 25. Default is none");
+
+module_param(gpio_in_pin, int, S_IRUGO);
+MODULE_PARM_DESC(gpio_in_pin, "GPIO input pin number of the BCM processor."
+		 " Valid pin numbers are: 0, 1, 4, 8, 7, 9, 10, 11, 14, 15,"
+		 " 17, 18, 21, 22, 23, 24, 25. Default is none");
+
+module_param(sense, bool, S_IRUGO);
+MODULE_PARM_DESC(sense, "Override autodetection of IR receiver circuit"
+		 " (0 = active high, 1 = active low )");
+
+module_param(softcarrier, bool, S_IRUGO);
+MODULE_PARM_DESC(softcarrier, "Software carrier (0 = off, 1 = on, default on)");
+
+module_param(invert, bool, S_IRUGO);
+MODULE_PARM_DESC(invert, "Invert output (0 = off, 1 = on, default off)");
+
+module_param(tx_mask, int, S_IRUGO);
+MODULE_PARM_DESC(tx_mask, "Transmitter mask (default: 0x01)");
+
+module_param(debug, bool, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(debug, "Enable debugging messages");
diff -Naur --no-dereference a/drivers/media/rc/Makefile b/drivers/media/rc/Makefile
--- a/drivers/media/rc/Makefile	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/media/rc/Makefile	2019-06-18 21:25:50.228278003 -0700
@@ -16,6 +16,7 @@
 obj-$(CONFIG_IR_MCE_KBD_DECODER) += ir-mce_kbd-decoder.o
 obj-$(CONFIG_IR_XMP_DECODER) += ir-xmp-decoder.o
 obj-$(CONFIG_IR_IMON_DECODER) += ir-imon-decoder.o
+obj-$(CONFIG_LIRC_RPI) += lirc_rpi.o
 obj-$(CONFIG_IR_RCMM_DECODER) += ir-rcmm-decoder.o
 
 # stand-alone IR receivers/transmitters
diff -Naur --no-dereference a/drivers/mmc/core/sd.c b/drivers/mmc/core/sd.c
--- a/drivers/mmc/core/sd.c	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/mmc/core/sd.c	2019-06-18 21:25:50.238273003 -0700
@@ -379,6 +379,15 @@
 	if (!status)
 		return -ENOMEM;
 
+	/*
+	 * Some SDHC cards, notably those with a Sandisk SD controller
+	 * (also found in Kingston products) need a bit of slack
+	 * before successfully handling the SWITCH command.  So far,
+	 * cards identifying themselves as "SD04G" and "SD08G" are
+	 * affected
+	 */
+	udelay(100);
+
 	err = mmc_sd_switch(card, 1, 0, 1, status);
 	if (err)
 		goto out;
diff -Naur --no-dereference a/drivers/mtd/spi-nor/spi-nor.c b/drivers/mtd/spi-nor/spi-nor.c
--- a/drivers/mtd/spi-nor/spi-nor.c	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/mtd/spi-nor/spi-nor.c	2019-06-18 21:25:50.268258002 -0700
@@ -1840,6 +1840,7 @@
 	{ "mx25l2005a",  INFO(0xc22012, 0, 64 * 1024,   4, SECT_4K) },
 	{ "mx25l4005a",  INFO(0xc22013, 0, 64 * 1024,   8, SECT_4K) },
 	{ "mx25l8005",   INFO(0xc22014, 0, 64 * 1024,  16, 0) },
+	{ "mx25l8006e",  INFO(0xc22014, 0, 64 * 1024,  16, SECT_4K) },
 	{ "mx25l1606e",  INFO(0xc22015, 0, 64 * 1024,  32, SECT_4K) },
 	{ "mx25l3205d",  INFO(0xc22016, 0, 64 * 1024,  64, SECT_4K) },
 	{ "mx25l3255e",  INFO(0xc29e16, 0, 64 * 1024,  64, SECT_4K) },
diff -Naur --no-dereference a/drivers/net/ethernet/marvell/mv643xx_eth.c b/drivers/net/ethernet/marvell/mv643xx_eth.c
--- a/drivers/net/ethernet/marvell/mv643xx_eth.c	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/net/ethernet/marvell/mv643xx_eth.c	2019-06-18 21:25:50.268258002 -0700
@@ -1,5 +1,11 @@
 /*
  * Driver for Marvell Discovery (MV643XX) and Marvell Orion ethernet ports
+ *
+ * Copyright (C) 2015-2017 bodhi <mibodhi@gmail.com>
+ * Copyright (C) 2015 michal osowiecki <michal.osowiecki@gmail.com>
+ *
+ * Based on
+ * Copyright (C) 2002 Matthew Dharm <mdharm@momenco.com>
  * Copyright (C) 2002 Matthew Dharm <mdharm@momenco.com>
  *
  * Based on the 64360 driver from:
@@ -2338,6 +2344,24 @@
 		mv643xx_eth_set_link_ksettings(
 			dev, (const struct ethtool_link_ksettings *)&cmd);
 		phy_start(dev->phydev);
+
+		/* For these devive, the MCU set the phy to 10-Mb mode as low-power status.
+		 * We have to set it back when booting up.
+		 * Set the phy back to auto-negotiation mode 
+		*/
+                if ( of_machine_is_compatible("zyxel,nsa310s") ||
+			of_machine_is_compatible("zyxel,nsa320s") ||
+			of_machine_is_compatible("zyxel,nsa320") ||
+			of_machine_is_compatible("zyxel,nsa325") ) {
+
+			printk ("mv643xx_eth: Set the PHY back to auto-negotiation mode");
+			phy_write(dev->phydev, 0x4, 0x1e1);
+			phy_write(dev->phydev, 0x9, 0x300);
+			phy_write(dev->phydev, 0x0, 0x9140);
+		}
+	}
+	else {
+		printk ("mv643xx_eth: no PHY");
 	}
 
 	/*
@@ -3154,8 +3178,20 @@
 					get_phy_mode(mp));
 		if (!phydev)
 			err = -ENODEV;
-		else
+		else {
+	                /* For these devices, set the PHY to fix link down after coming up from power off */
+	                if ( of_machine_is_compatible("zyxel,nsa310s") ||
+        	                of_machine_is_compatible("zyxel,nsa320s") ||
+                	        of_machine_is_compatible("zyxel,nsa320") ||
+                        	of_machine_is_compatible("zyxel,nsa325") ) {
+
+	                        printk ("mv643xx_eth: Set the PHY to fix link down");
+        	                phy_write(phydev, 22, 0x3);
+                	        phy_write(phydev, 22, 0x0);
+	                }
 			phy_addr_set(mp, phydev->mdio.addr);
+		}
+
 	} else if (pd->phy_addr != MV643XX_ETH_PHY_NONE) {
 		phydev = phy_scan(mp, pd->phy_addr);
 
@@ -3199,7 +3235,7 @@
 	dev->watchdog_timeo = 2 * HZ;
 	dev->base_addr = 0;
 
-	dev->features = NETIF_F_SG | NETIF_F_IP_CSUM | NETIF_F_TSO;
+	dev->features = NETIF_F_SG | NETIF_F_IP_CSUM;
 	dev->vlan_features = dev->features;
 
 	dev->features |= NETIF_F_RXCSUM;
diff -Naur --no-dereference a/drivers/net/Kconfig b/drivers/net/Kconfig
--- a/drivers/net/Kconfig	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/net/Kconfig	2019-06-18 21:25:50.288248002 -0700
@@ -26,6 +26,7 @@
 if NETDEVICES
 
 config MII
+	default y
 	tristate
 
 config NET_CORE
diff -Naur --no-dereference a/drivers/pinctrl/mvebu/pinctrl-kirkwood.c b/drivers/pinctrl/mvebu/pinctrl-kirkwood.c
--- a/drivers/pinctrl/mvebu/pinctrl-kirkwood.c	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/pinctrl/mvebu/pinctrl-kirkwood.c	2019-06-18 21:25:50.298243002 -0700
@@ -107,7 +107,7 @@
 		MPP_VAR_FUNCTION(0x5, "sata0", "act",    V(0, 1, 1, 1, 1, 0))),
 	MPP_MODE(12,
 		MPP_VAR_FUNCTION(0x0, "gpo", NULL,       V(1, 1, 1, 0, 1, 0)),
-		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(0, 0, 0, 1, 0, 0)),
+		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(1, 1, 1, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0x1, "sdio", "clk",     V(1, 1, 1, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0xa, "audio", "spdifo", V(0, 0, 0, 0, 1, 0)),
 		MPP_VAR_FUNCTION(0xb, "spi", "mosi",     V(0, 0, 0, 0, 1, 0)),
@@ -338,7 +338,7 @@
 		MPP_VAR_FUNCTION(0x2, "tdm", "fs",       V(0, 0, 0, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0xb, "lcd", "hsync",    V(0, 0, 0, 0, 1, 0))),
 	MPP_MODE(47,
-		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(0, 0, 0, 1, 1, 0)),
+		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(1, 1, 1, 1, 1, 1)),
 		MPP_VAR_FUNCTION(0x1, "ts", "mp11",      V(0, 0, 0, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0x2, "tdm", "drx",      V(0, 0, 0, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0xb, "lcd", "vsync",    V(0, 0, 0, 0, 1, 0))),
@@ -348,7 +348,7 @@
 		MPP_VAR_FUNCTION(0x2, "tdm", "dtx",      V(0, 0, 0, 1, 1, 0)),
 		MPP_VAR_FUNCTION(0xb, "lcd", "d16",      V(0, 0, 0, 0, 1, 0))),
 	MPP_MODE(49,
-		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(0, 0, 0, 1, 0, 1)),
+		MPP_VAR_FUNCTION(0x0, "gpio", NULL,      V(1, 1, 1, 1, 1, 1)),
 		MPP_VAR_FUNCTION(0x0, "gpo", NULL,       V(0, 0, 0, 0, 1, 0)),
 		MPP_VAR_FUNCTION(0x1, "ts", "mp9",       V(0, 0, 0, 1, 0, 0)),
 		MPP_VAR_FUNCTION(0x2, "tdm", "rx0ql",    V(0, 0, 0, 1, 1, 0)),
diff -Naur --no-dereference a/drivers/rtc/Kconfig b/drivers/rtc/Kconfig
--- a/drivers/rtc/Kconfig	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/rtc/Kconfig	2019-06-18 21:25:50.308238001 -0700
@@ -296,6 +296,15 @@
 	  This driver can also be built as a module. If so, the module
 	  will be called rtc-ds1672.
 
+config RTC_DRV_HT1382
+	tristate "Holtek HT1382"
+	depends on I2C && OF
+	help
+	  Say Y to enable support for the HT1382 I2C RTC chip.
+
+	  This driver can also be built as a module. If so, the module
+	  will be called rtc-ht1382.
+
 config RTC_DRV_HYM8563
 	tristate "Haoyu Microelectronics HYM8563"
 	depends on OF
diff -Naur --no-dereference a/drivers/rtc/Makefile b/drivers/rtc/Makefile
--- a/drivers/rtc/Makefile	2019-06-17 10:50:37.000000000 -0700
+++ b/drivers/rtc/Makefile	2019-06-18 21:25:50.308238001 -0700
@@ -75,6 +75,7 @@
 obj-$(CONFIG_RTC_DRV_GENERIC)	+= rtc-generic.o
 obj-$(CONFIG_RTC_DRV_GOLDFISH)	+= rtc-goldfish.o
 obj-$(CONFIG_RTC_DRV_HID_SENSOR_TIME) += rtc-hid-sensor-time.o
+obj-$(CONFIG_RTC_DRV_HT1382)	+= rtc-ht1382.o
 obj-$(CONFIG_RTC_DRV_HYM8563)	+= rtc-hym8563.o
 obj-$(CONFIG_RTC_DRV_IMXDI)	+= rtc-imxdi.o
 obj-$(CONFIG_RTC_DRV_IMX_SC)	+= rtc-imx-sc.o
diff -Naur --no-dereference a/drivers/rtc/rtc-ht1382.c b/drivers/rtc/rtc-ht1382.c
--- a/drivers/rtc/rtc-ht1382.c	1969-12-31 16:00:00.000000000 -0800
+++ b/drivers/rtc/rtc-ht1382.c	2019-06-18 21:25:50.308238001 -0700
@@ -0,0 +1,213 @@
+/*
+ * Driver for Holtek HT1382 RTC.
+ *
+ * Copyright (C) 2015 bodhi <mibodhi@gmail.com>
+ * Copyright (C) 2015 michal osowiecki <michal.osowiecki@gmail.com>
+ *
+ * Based on
+ * Copyright (C) 2015 Karoly Pocsi <chrlee@chrlee.net>
+ *
+ * Based on bq32k driver by Semihalf and Pavel Machek
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * You can get hardware description at
+ * http://www.holtek.com.tw/english/docum/consumer/1382.htm
+ *
+ * NOTE: Currently this driver only supports the bare minimum for read
+ * and write the RTC. The extra features provided by the chip
+ * (alarm, digital trimming, eprom) are unavailable.
+ */
+
+#include <linux/module.h>
+#include <linux/i2c.h>
+#include <linux/rtc.h>
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/bcd.h>
+
+#define HT1382_SECONDS		0x00	/* Seconds register address */
+#define HT1382_STOP		0x80	/* Oscillator Stop flag */
+#define HT1382_HOUR_1224	0x80	/* 12/24 flag */
+#define HT1382_HOUR_AMPM	0x20	/* AM/PM flag */
+
+#define HT1382_ST1		0x07	/* Status register address */
+#define HT1382_WP		0x80	/* Write Protect flag */
+
+struct ht1382_regs {
+	uint8_t		second;
+	uint8_t		minute;
+	uint8_t		hour;
+	uint8_t		date;
+	uint8_t		month;
+	uint8_t		day;
+	uint8_t		year;
+};
+
+static struct i2c_driver ht1382_driver;
+
+static int ht1382_read(struct device *dev, void *data, uint8_t off, uint8_t len)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct i2c_msg msgs[] = {
+		{
+			.addr = client->addr,
+			.flags = 0,
+			.len = 1,
+			.buf = &off,
+		}, {
+			.addr = client->addr,
+			.flags = I2C_M_RD,
+			.len = len,
+			.buf = data,
+		}
+	};
+
+	if (i2c_transfer(client->adapter, msgs, 2) == 2)
+		return 0;
+
+	return -EIO;
+}
+
+static int ht1382_write(struct device *dev, void *data, uint8_t off, uint8_t len)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	uint8_t buffer[len + 1];
+
+	buffer[0] = off;
+	memcpy(&buffer[1], data, len);
+
+	if (i2c_master_send(client, buffer, len + 1) == len + 1)
+		return 0;
+
+	return -EIO;
+}
+
+static int ht1382_rtc_read_time(struct device *dev, struct rtc_time *tm)
+{
+	struct ht1382_regs regs;
+	int error;
+
+	error = ht1382_read(dev, &regs, 0, sizeof(regs));
+	if (error)
+		return error;
+
+	dev_dbg(dev,
+		"%s: raw data is sec=%02x, min=%02x, hour=%02x, "
+		"date=%02x, day=%02x, mon=%02x, "
+		"year=%02x\n",
+		__func__,
+		regs.second,regs.minute,regs.hour,
+		regs.date,regs.day,regs.month,regs.year);
+
+	tm->tm_sec = bcd2bin(regs.second & 0x7f);
+	tm->tm_min = bcd2bin(regs.minute & 0x7f);
+        if (regs.hour & HT1382_HOUR_1224) {
+                tm->tm_hour = bcd2bin(regs.hour & 0x1f);
+                if (regs.hour & HT1382_HOUR_AMPM) tm->tm_hour += 12;
+        } else {
+                tm->tm_hour = bcd2bin(regs.hour & 0x3f);
+	}
+	tm->tm_mday = bcd2bin(regs.date);
+	tm->tm_wday = bcd2bin(regs.day) - 1;
+	tm->tm_mon = bcd2bin(regs.month) - 1;
+	tm->tm_year = bcd2bin(regs.year) + 100;
+	if (rtc_valid_tm(tm)) {
+		dev_err(dev, "retrieved date/time is not valid.\n");		
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int ht1382_rtc_set_time(struct device *dev, struct rtc_time *tm)
+{
+	struct ht1382_regs regs;
+	uint8_t reg;
+	int error;
+
+	/* WP off */
+	reg = 0;
+	error = ht1382_write(dev, &reg, HT1382_ST1, 1);
+	if (error)
+		return error;
+
+	regs.second = bin2bcd(tm->tm_sec);
+	regs.minute = bin2bcd(tm->tm_min);
+	regs.hour = bin2bcd(tm->tm_hour) | HT1382_HOUR_1224;
+	regs.day = bin2bcd(tm->tm_wday + 1);
+	regs.date = bin2bcd(tm->tm_mday);
+	regs.month = bin2bcd(tm->tm_mon + 1);
+	regs.year = bin2bcd(tm->tm_year % 100);
+
+	error = ht1382_write(dev, &regs, 0, sizeof(regs));
+	if (error)
+		return error;
+
+	/* WP on */
+	reg = 0x80;
+	return ht1382_write(dev, &reg, HT1382_ST1, 1);
+}
+
+static const struct rtc_class_ops ht1382_rtc_ops = {
+	.read_time	= ht1382_rtc_read_time,
+	.set_time	= ht1382_rtc_set_time,
+};
+
+static int ht1382_probe(struct i2c_client *client,
+				const struct i2c_device_id *id)
+{
+	struct device *dev = &client->dev;
+	struct rtc_device *rtc;
+	uint8_t reg;
+	int error;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
+		return -ENODEV;
+
+	error = ht1382_read(dev, &reg, HT1382_SECONDS, 1);
+	if (!error && (reg & HT1382_STOP)) {
+		dev_warn(dev, "Oscillator was halted. Restarting...\n");
+		reg &= ~HT1382_STOP;
+		error = ht1382_write(dev, &reg, HT1382_SECONDS, 1);
+	}
+	if (error)
+		return error;
+
+	rtc = devm_rtc_device_register(&client->dev, ht1382_driver.driver.name,
+						&ht1382_rtc_ops, THIS_MODULE);
+	if (IS_ERR(rtc))
+		return PTR_ERR(rtc);
+
+	i2c_set_clientdata(client, rtc);
+
+	return 0;
+}
+
+static const struct i2c_device_id ht1382_id[] = {
+	{ "ht1382", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, ht1382_id);
+
+static const struct of_device_id ht1382_of_match[] = {
+        { .compatible = "htk,ht1382" },
+        {}
+};
+MODULE_DEVICE_TABLE(of, ht1382_of_match);
+
+static struct i2c_driver ht1382_driver = {
+	.driver = {
+		.name	= "ht1382",
+		.owner	= THIS_MODULE,
+	},
+	.probe		= ht1382_probe,
+	.id_table	= ht1382_id,
+};
+
+module_i2c_driver(ht1382_driver);
+
+MODULE_AUTHOR("Karoly Pocsi <chrlee@chrlee.net>");
+MODULE_DESCRIPTION("Holtek 1382 I2C RTC driver");
+MODULE_LICENSE("GPL");
diff -Naur --no-dereference a/include/linux/ide.h b/include/linux/ide.h
--- a/include/linux/ide.h	2019-06-17 10:50:37.000000000 -0700
+++ b/include/linux/ide.h	2019-06-18 21:25:50.318233001 -0700
@@ -1583,7 +1583,10 @@
 
 static inline void ide_dump_identify(u8 *id)
 {
-	print_hex_dump(KERN_INFO, "", DUMP_PREFIX_NONE, 16, 2, id, 512, 0);
+
+	print_hex_dump(KERN_DEBUG, "", DUMP_PREFIX_NONE, 16, 2, id, 512, 0);
+
+
 }
 
 static inline int hwif_to_node(ide_hwif_t *hwif)
diff -Naur --no-dereference a/include/linux/leds.h b/include/linux/leds.h
--- a/include/linux/leds.h	2019-06-17 10:50:37.000000000 -0700
+++ b/include/linux/leds.h	2019-06-18 21:25:50.318233001 -0700
@@ -1,6 +1,7 @@
 /*
  * Driver model for leds and led triggers
  *
+ * Copyright (C) 2016 bodhi <mibodhi@gmail.com>
  * Copyright (C) 2005 John Lenz <lenz@cs.wisc.edu>
  * Copyright (C) 2005 Richard Purdie <rpurdie@openedhand.com>
  *
@@ -391,9 +392,9 @@
 
 /* Trigger specific functions */
 #ifdef CONFIG_LEDS_TRIGGER_DISK
-extern void ledtrig_disk_activity(bool write);
+extern void ledtrig_disk_activity(int portno, bool write);
 #else
-static inline void ledtrig_disk_activity(bool write) {}
+static inline void ledtrig_disk_activity(int portno, bool write) {}
 #endif
 
 #ifdef CONFIG_LEDS_TRIGGER_MTD
diff -Naur --no-dereference a/REPORTING-BUGS b/REPORTING-BUGS
--- a/REPORTING-BUGS	1969-12-31 16:00:00.000000000 -0800
+++ b/REPORTING-BUGS	2019-06-18 21:25:50.328228001 -0700
@@ -0,0 +1,174 @@
+Background
+==========
+
+The upstream Linux kernel maintainers only fix bugs for specific kernel
+versions.  Those versions include the current "release candidate" (or -rc)
+kernel, any "stable" kernel versions, and any "long term" kernels.
+
+Please see https://www.kernel.org/ for a list of supported kernels.  Any
+kernel marked with [EOL] is "end of life" and will not have any fixes
+backported to it.
+
+If you've found a bug on a kernel version that isn't listed on kernel.org,
+contact your Linux distribution or embedded vendor for support.
+Alternatively, you can attempt to run one of the supported stable or -rc
+kernels, and see if you can reproduce the bug on that.  It's preferable
+to reproduce the bug on the latest -rc kernel.
+
+
+How to report Linux kernel bugs
+===============================
+
+
+Identify the problematic subsystem
+----------------------------------
+
+Identifying which part of the Linux kernel might be causing your issue
+increases your chances of getting your bug fixed. Simply posting to the
+generic linux-kernel mailing list (LKML) may cause your bug report to be
+lost in the noise of a mailing list that gets 1000+ emails a day.
+
+Instead, try to figure out which kernel subsystem is causing the issue,
+and email that subsystem's maintainer and mailing list.  If the subsystem
+maintainer doesn't answer, then expand your scope to mailing lists like
+LKML.
+
+
+Identify who to notify
+----------------------
+
+Once you know the subsystem that is causing the issue, you should send a
+bug report.  Some maintainers prefer bugs to be reported via bugzilla
+(https://bugzilla.kernel.org), while others prefer that bugs be reported
+via the subsystem mailing list.
+
+To find out where to send an emailed bug report, find your subsystem or
+device driver in the MAINTAINERS file.  Search in the file for relevant
+entries, and send your bug report to the person(s) listed in the "M:"
+lines, making sure to Cc the mailing list(s) in the "L:" lines.  When the
+maintainer replies to you, make sure to 'Reply-all' in order to keep the
+public mailing list(s) in the email thread.
+
+If you know which driver is causing issues, you can pass one of the driver
+files to the get_maintainer.pl script:
+     perl scripts/get_maintainer.pl -f <filename>
+
+If it is a security bug, please copy the Security Contact listed in the
+MAINTAINERS file.  They can help coordinate bugfix and disclosure.  See
+Documentation/SecurityBugs for more information.
+
+If you can't figure out which subsystem caused the issue, you should file
+a bug in kernel.org bugzilla and send email to
+linux-kernel@vger.kernel.org, referencing the bugzilla URL.  (For more
+information on the linux-kernel mailing list see
+http://www.tux.org/lkml/).
+
+
+Tips for reporting bugs
+-----------------------
+
+If you haven't reported a bug before, please read:
+
+http://www.chiark.greenend.org.uk/~sgtatham/bugs.html
+http://www.catb.org/esr/faqs/smart-questions.html
+
+It's REALLY important to report bugs that seem unrelated as separate email
+threads or separate bugzilla entries.  If you report several unrelated
+bugs at once, it's difficult for maintainers to tease apart the relevant
+data.
+
+
+Gather information
+------------------
+
+The most important information in a bug report is how to reproduce the
+bug.  This includes system information, and (most importantly)
+step-by-step instructions for how a user can trigger the bug.
+
+If the failure includes an "OOPS:", take a picture of the screen, capture
+a netconsole trace, or type the message from your screen into the bug
+report.  Please read "Documentation/oops-tracing.txt" before posting your
+bug report. This explains what you should do with the "Oops" information
+to make it useful to the recipient.
+
+This is a suggested format for a bug report sent via email or bugzilla.
+Having a standardized bug report form makes it easier for you not to
+overlook things, and easier for the developers to find the pieces of
+information they're really interested in.  If some information is not
+relevant to your bug, feel free to exclude it.
+
+First run the ver_linux script included as scripts/ver_linux, which
+reports the version of some important subsystems.  Run this script with
+the command "sh scripts/ver_linux".
+
+Use that information to fill in all fields of the bug report form, and
+post it to the mailing list with a subject of "PROBLEM: <one line
+summary from [1.]>" for easy identification by the developers.
+
+[1.] One line summary of the problem:
+[2.] Full description of the problem/report:
+[3.] Keywords (i.e., modules, networking, kernel):
+[4.] Kernel information
+[4.1.] Kernel version (from /proc/version):
+[4.2.] Kernel .config file:
+[5.] Most recent kernel version which did not have the bug:
+[6.] Output of Oops.. message (if applicable) with symbolic information
+     resolved (see Documentation/oops-tracing.txt)
+[7.] A small shell script or example program which triggers the
+     problem (if possible)
+[8.] Environment
+[8.1.] Software (add the output of the ver_linux script here)
+[8.2.] Processor information (from /proc/cpuinfo):
+[8.3.] Module information (from /proc/modules):
+[8.4.] Loaded driver and hardware information (/proc/ioports, /proc/iomem)
+[8.5.] PCI information ('lspci -vvv' as root)
+[8.6.] SCSI information (from /proc/scsi/scsi)
+[8.7.] Other information that might be relevant to the problem
+       (please look in /proc and include all information that you
+       think to be relevant):
+[X.] Other notes, patches, fixes, workarounds:
+
+
+Follow up
+=========
+
+Expectations for bug reporters
+------------------------------
+
+Linux kernel maintainers expect bug reporters to be able to follow up on
+bug reports.  That may include running new tests, applying patches,
+recompiling your kernel, and/or re-triggering your bug.  The most
+frustrating thing for maintainers is for someone to report a bug, and then
+never follow up on a request to try out a fix.
+
+That said, it's still useful for a kernel maintainer to know a bug exists
+on a supported kernel, even if you can't follow up with retests.  Follow
+up reports, such as replying to the email thread with "I tried the latest
+kernel and I can't reproduce my bug anymore" are also helpful, because
+maintainers have to assume silence means things are still broken.
+
+Expectations for kernel maintainers
+-----------------------------------
+
+Linux kernel maintainers are busy, overworked human beings.  Some times
+they may not be able to address your bug in a day, a week, or two weeks.
+If they don't answer your email, they may be on vacation, or at a Linux
+conference.  Check the conference schedule at LWN.net for more info:
+	https://lwn.net/Calendar/
+
+In general, kernel maintainers take 1 to 5 business days to respond to
+bugs.  The majority of kernel maintainers are employed to work on the
+kernel, and they may not work on the weekends.  Maintainers are scattered
+around the world, and they may not work in your time zone.  Unless you
+have a high priority bug, please wait at least a week after the first bug
+report before sending the maintainer a reminder email.
+
+The exceptions to this rule are regressions, kernel crashes, security holes,
+or userspace breakage caused by new kernel behavior.  Those bugs should be
+addressed by the maintainers ASAP.  If you suspect a maintainer is not
+responding to these types of bugs in a timely manner (especially during a
+merge window), escalate the bug to LKML and Linus Torvalds.
+
+Thank you!
+
+[Some of this is taken from Frohwalt Egerer's original linux-kernel FAQ]
